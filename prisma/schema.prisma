generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
}

enum PromoCodeType {
  RUB
  percent
}

enum OrderType {
  DELIVERY
  PICKUP
}

enum PaymentType {
  CASH
  CARD
}

enum OrderStatus {
  new
  accepted
  production
  produced
  delivery
  completed
  deleted
}

enum ProductType {
  PIZZA
  DEFAULT
}

model User {
  id           String        @id @default(uuid())
  role         UserRole      @default(USER)
  tel          String        @unique
  isActivated  Boolean       @default(false)
  bonus        Bonus[]
  token        Token?
  order        Order[]
  confirmation Confirmation?
  profile      Profile?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  @@map("users")
}

model Profile {
  id          String    @id @default(uuid())
  user        User      @relation(fields: [userId], references: [id])
  userId      String    @unique
  email       String?   @unique
  dateOfBirth DateTime?
  name        String?
  surname     String?
  street      String?
  house       String?
  floor       String?
  entrance    String?
  room        String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("profiles")
}

model Branch {
  id        String   @id @default(uuid())
  name      String   @unique
  order     Order[]
  createdAt DateTime @default(now())

  @@map("branches")
}

model Bonus {
  id          String   @id @default(uuid())
  score       String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  order       Order?   @relation(fields: [orderId], references: [id], onDelete: SetNull)
  orderId     String?  @unique
  description String?
  createdAt   DateTime @default(now())

  @@map("bonuses")
}

model Confirmation {
  id        String   @id @default(uuid())
  requestId String   @unique
  code      Int
  expiresIn DateTime
  isUsed    Boolean  @default(false)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @unique
  createdAt DateTime @default(now())

  @@map("confirmations")
}

model Token {
  id           String   @id @default(uuid())
  refreshToken String   @unique
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("tokens")
}

model PromoCode {
  id        String        @id @default(uuid())
  code      String        @unique
  type      PromoCodeType
  discount  String
  limit     Int?
  order     Order[]
  createdAt DateTime      @default(now())

  @@map("promoCodes")
}

model Order {
  id             String         @id @default(uuid())
  bonus          Bonus?
  totalPrice     String
  totalAmount    String
  type           OrderType
  clientName     String
  clientAddress  String?
  clientEntrance String?
  clientFloor    String?
  clientRoom     String?
  clientTel      String
  clientEmail    String?
  preOrderDate   DateTime?
  utensils       String
  payment        PaymentType
  commentary     String?
  promoCode      PromoCode?     @relation(fields: [promoCodeId], references: [id], onDelete: SetNull)
  promoCodeId    String?
  status         OrderStatus    @default(new)
  channel        Int?           @default(2030)
  user           User?          @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId         String?
  branch         Branch?        @relation(fields: [branchId], references: [id], onDelete: SetNull)
  branchId       String?
  orderProduct   OrderProduct[]
  createdAt      DateTime       @default(now())

  @@map("orders")
}

model OrderProduct {
  id          String      @id @default(uuid())
  product     Product[]
  order       Order       @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId     String      @unique
  name        String
  rating      Int
  description String
  image       String
  orderIndex  Int
  type        ProductType @default(DEFAULT)
  productSize String
  price       String
  sku         String      @unique
  amount      String
  createdAt   DateTime    @default(now())

  @@map("orderProducts")
}

model Product {
  id             String        @id @default(uuid())
  orderProduct   OrderProduct? @relation(fields: [orderProductId], references: [id], onDelete: SetNull)
  orderProductId String?       @unique
  productSize    ProductSize[]
  name           String
  rating         Int           @default(5)
  description    String
  image          String
  orderIndex     Int           @default(autoincrement())
  type           ProductType   @default(DEFAULT)
  category       Category?     @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  categoryId     String?
  createdAt      DateTime      @default(now())

  @@map("products")
}

model ProductSize {
  id        String   @id @default(uuid())
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  name      String
  price     String
  sku       String
  createdAt DateTime @default(now())

  @@map("productSizes")
}

model Category {
  id         String    @id @default(uuid())
  product    Product[]
  name       String    @unique
  image      String?
  orderIndex Int       @default(autoincrement())
  createdAt  DateTime  @default(now())

  @@map("categories")
}
